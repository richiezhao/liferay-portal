@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Business Accounts";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@priority = "4"
	test AccountAccountUserFilterByNavigation {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "Filter AccountUser in Account By Navigation.",
			accountName = "Filter Account User");

		for (var accountUser : list "1,2") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Account Users");

			AccountUsers.addUsers(
				accountName = "Filter Account User",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.deactivateUser(userFirstName = "userfn2");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Filter Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		ManagementBar.setFilterAndOrder(filterBy = "Active");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");
	}

	@priority = "4"
	test AccountFilterByType {
		for (var accountType : list "Business,Person") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Accounts");

			Accounts.addCP(
				accountDescription = "This is a ${accountType} Account.",
				accountName = "${accountType} Account",
				accountType = "${accountType}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		ManagementBar.setFilterAndOrder(filterBy = "Business");

		LexiconEntry.viewEntryName(rowEntry = "Business Account");

		LexiconEntry.viewNoEntry(rowEntry = "Person Account");

		ManagementBar.setFilterAndOrder(filterBy = "Person");

		LexiconEntry.viewEntryName(rowEntry = "Person Account");

		LexiconEntry.viewNoEntry(rowEntry = "Business Account");

		ManagementBar.setFilterAndOrder(filterBy = "All");

		LexiconEntry.viewEntryName(rowEntry = "Business Account");

		LexiconEntry.viewEntryName(rowEntry = "Person Account");
	}

	@priority = "4"
	test AccountUserFilterByAccounts {
		for (var accountType : list "Business,Person") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Accounts");

			Accounts.addCP(
				accountDescription = "This is a ${accountType} Account.",
				accountName = "${accountType} Account",
				accountType = "${accountType}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Business Account",
			userEmailAddress = "businessuser@liferay.com",
			userFirstName = "business",
			userLastName = "user",
			userScreenName = "businessuser");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Business Account",
			userEmailAddress = "userbusiness@liferay.com",
			userFirstName = "user",
			userLastName = "business",
			userScreenName = "userbusiness");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Person Account",
			userEmailAddress = "personuser@liferay.com",
			userFirstName = "person",
			userLastName = "user",
			userScreenName = "personuser");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		ManagementBar.setFilterAndOrder(filterBy = "Accounts");

		AccountUsers.selectAccounts(accountName = "Person Account");

		LexiconEntry.viewEntryName(rowEntry = "person user");

		LexiconEntry.viewNoEntry(rowEntry = "user business");

		LexiconEntry.viewNoEntry(rowEntry = "business user");

		ManagementBar.setFilterAndOrder(filterBy = "Accounts");

		AccountUsers.selectAccounts(accountName = "Business Account");

		LexiconEntry.viewEntryName(rowEntry = "business user");

		LexiconEntry.viewEntryName(rowEntry = "user business");

		LexiconEntry.viewNoEntry(rowEntry = "person user");
	}

	@priority = "4"
	test AccountUserFilterByNoAssignedAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		for (var accountUser : list "1,2") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Account Users");

			AccountUsers.addUsers(
				accountName = "Account with User",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.removeAccount(
			accountName = "Account with User",
			accountUser = "userfn1 userln1");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		ManagementBar.setFilterAndOrder(filterBy = "No Assigned Account");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewNoEntry(rowEntry = "userfn2 userln2");

		ManagementBar.setFilterAndOrder(filterBy = "All");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");
	}

	@priority = "4"
	test AddAccountUser {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@priority = "4"
	test AddAccountUserViaAssignUser {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "Add account user via assign user.",
			accountName = "Assign Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.addAssignee(
			accountName = "Assign Account User",
			addNewAssignee = "true",
			assigneeName = "userfn",
			assigneeType = "Users",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Assign Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn");
	}

	@priority = "4"
	test AddAccountWithMultiDomains {
		AccountConfiguration.enableAccountEmailDomain();

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "Account with Multi Domains",
			domainNames = "liferay.com,Google.com,si-na.com,9teen.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Account with Multi Domains");

		for (var domainName : list "liferay.com,Google.com,si-na.com,9teen.com") {
			AssertElementPresent(
				key_domainName = "${domainName}",
				locator1 = "Account#DOMAIN_TABLE_NAME");
		}
	}

	@priority = "3"
	test AddBlockedEmailDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		AccountConfiguration.enableAccountEmailDomain();

		AccountConfiguration.addBlockedEmailDomain(settingValues = "yahoo.com,blocked.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "AM Account",
			domainNames = "liferay.com,Google.com");

		AccountConfiguration.addAccountManager(
			accountName = "AM Account",
			orgName = "AM Organization",
			orgRoleTitle = "Account Manager",
			userEmailAddress = "useramea@liferay.com",
			userFirstName = "useramfn",
			userLastName = "useramln",
			userScreenName = "useramsn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "useramea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.addAssignee(
			accountName = "AM Account",
			addNewAssignee = "true",
			assigneeName = "userfn",
			assigneeType = "Users",
			domainValidation = "Blocked",
			invalidDomainName = "blocked.com",
			userEmailAddress = "userea@blocked.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@priority = "4"
	test AddPersonAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account",
			accountType = "Person");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Search.searchCP(searchTerm = "Person Account");

		Accounts.viewAccountDetails(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account",
			accountType = "Person");
	}

	@priority = "3"
	test AddUserWithDifferentDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		AccountConfiguration.enableAccountEmailDomain();

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "AM Account",
			domainNames = "liferay.com,Google.com,9teen.com");

		AccountConfiguration.addAccountManager(
			accountName = "AM Account",
			orgName = "AM Organization",
			orgRoleTitle = "Account Manager",
			userEmailAddress = "useramea@liferay.com",
			userFirstName = "useramfn",
			userLastName = "useramln",
			userScreenName = "useramsn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "useramea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.addAssignee(
			accountName = "AM Account",
			addNewAssignee = "true",
			assigneeName = "userfn",
			assigneeType = "Users",
			domainValidation = "Invalid",
			emailDomainName = "nodomain.com",
			userEmailAddress = "userea@nodomain.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@priority = "3"
	test AddUserWithSameDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		AccountConfiguration.enableAccountEmailDomain();

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with Multi Domains",
			accountName = "AM Account",
			domainNames = "liferay.com,Google.com,9teen.com");

		AccountConfiguration.addAccountManager(
			accountName = "AM Account",
			orgName = "AM Organization",
			orgRoleTitle = "Account Manager",
			userEmailAddress = "useramea@liferay.com",
			userFirstName = "useramfn",
			userLastName = "useramln",
			userScreenName = "useramsn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "useramea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.addAssignee(
			accountName = "AM Account",
			addNewAssignee = "true",
			assigneeName = "userfn",
			assigneeType = "Users",
			emailDomainName = "9teen.com",
			userEmailAddress = "userea@9teen.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn",
			validDomainNames = "liferay.com,Google.com,9teen.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@priority = "4"
	test AssignExistingUserToAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an account with user.",
			accountName = "Account Name");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountConfiguration.enableAccountEmailDomain();

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is a test for adding user to account.",
			accountName = "Account with Exist User",
			domainNames = "liferay.com");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.addAssignee(
			accountName = "Account with Exist User",
			assigneeName = "userfn",
			assigneeType = "Users");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Account with Exist User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn");
	}

	@priority = "4"
	test AssignOrganizationToAccount {
		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is a test for adding organization to account.",
			accountName = "Account with Organization");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.addAssignee(
			accountName = "Account with Organization",
			assigneeName = "Organization for Account",
			assigneeType = "Organizations");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Account with Organization");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.viewAssignee(assigneeName = "Organization for Account");
	}

	@priority = "4"
	test CancelAccountCreation {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoAdd();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Add Account");

		PortletEntry.inputName(name = "Cancel Accounts Name");

		Button.clickCancel();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Accounts");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Search.searchCP(searchTerm = "Cancel Accounts Name");

		LexiconEntry.viewNoEntry(rowEntry = "Cancel Accounts Name");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoAdd();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Add Account");

		PortletEntry.inputName(name = "Back Icon Account");

		Navigator.gotoBack();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Accounts");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Search.searchCP(searchTerm = "Back Icon Account");

		LexiconEntry.viewNoEntry(rowEntry = "Back Icon Account");
	}

	@priority = "4"
	test DeactivateActivateUser {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		AccountUsers.deactivateUser(userFirstName = "userfn");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryStatus(
			rowEntry = "userfn",
			rowStatus = "Inactive");
	}

	@priority = "4"
	test DeleteAccount {
		property portal.acceptance = "true";

		for (var accountNumber : list "1,2,3") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Accounts");

			Accounts.addCP(
				accountDescription = "Accounts Name ${accountNumber} Description",
				accountName = "Delete Accounts Name ${accountNumber} for Test");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.deleteAccount(accountName = "Delete Accounts Name 1 for Test");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 1 for Test");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.deleteAccount(
			accountName = "Delete Accounts Name 2 for Test",
			deactivateType = "Delete Icon");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 2 for Test");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.deleteAccount(
			accountName = "Delete Accounts Name 3 for Test",
			deactivateType = "Management Toolbar");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 3 for Test");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		for (var accountNumber : list "1,2,3") {
			LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name ${accountNumber} for Test");
		}
	}

	@description = "This is a use case for LPS-101315."
	@priority = "4"
	test DeleteInactiveAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test",
			accountStatus = "Inactive");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		Accounts.deleteAccount(accountName = "Accounts Name for Test");

		ManagementBar.viewFilterAndOrder(menuItem = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");
	}

	@description = "This is a use case for LPS-107598."
	@priority = "4"
	test FilterAccountUserInTheUsersAdminPortlet {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Account with User",
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		LexiconEntry.viewNoEntry(rowEntry = "userac userac");

		ManagementBar.setFilterAndOrder(filterBy = "All");

		LexiconEntry.viewEntryName(rowEntry = "userac userac");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		ManagementBar.setFilterAndOrder(filterBy = "Account Users");

		LexiconEntry.viewEntryName(rowEntry = "userac userac");

		LexiconEntry.viewNoEntry(rowEntry = "userfn userln");
	}

	@priority = "4"
	test ImpersonateUser {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		User.impersonateCP(
			siteName = "${siteName}",
			userName = "userfn");
	}

	@priority = "4"
	test InactiveAccount {
		for (var accountNumber : list "1,2,3") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Accounts");

			Accounts.addCP(
				accountDescription = "Accounts Name ${accountNumber} Description",
				accountName = "Accounts Name ${accountNumber} for Test");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.inactiveAccount(accountName = "Accounts Name 1 for Test");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 1 for Test");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.inactiveAccount(
			accountName = "Accounts Name 2 for Test",
			deactivateType = "Hide Icon");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 2 for Test");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.inactiveAccount(
			accountName = "Accounts Name 3 for Test",
			deactivateType = "Management Toolbar");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 3 for Test");
	}

	@description = "This is a use case for LPS-117171."
	@priority = "3"
	test NoFilterByNavigationForPersonAccount {
		for (var accountType : list "Business,Person") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Accounts");

			Accounts.addCP(
				accountDescription = "This is a ${accountType} Account.",
				accountName = "${accountType} Account",
				accountType = "${accountType}");
		}

		for (var accountUser : list "1,2") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Account Users");

			AccountUsers.addUsers(
				accountName = "Business Account",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.gotoEdit(accountName = "Person Account");

		AssertClick(
			locator1 = "Account#USER_SELECT",
			value1 = "Select");

		SelectFrame(locator1 = "IFrame#ASSIGN_USER");

		ManagementBar.viewNoSubheaderInFilterAndOrder(subheaderItem = "Filter by Navigation");
	}

	@priority = "4"
	test PersonAccountSmoke {
		for (var accountType : list "Business,Person") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Accounts");

			Accounts.addCP(
				accountDescription = "This is a ${accountType} Account.",
				accountName = "${accountType} Account",
				accountType = "${accountType}");
		}

		for (var accountUser : list "1,2") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Account Users");

			AccountUsers.addUsers(
				accountName = "Business Account",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		Accounts.gotoEdit(accountName = "Person Account");

		for (var navTab : list "Details,Organizations,Roles") {
			Accounts.viewAssigneeTab(navTab = "${navTab}");
		}

		Accounts.viewNoAssigneeTab(navTab = "Users");

		Accounts.selectUser(accountUserName = "userfn1");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.gotoEdit(accountName = "Person Account");

		Accounts.selectUser(accountUserName = "userfn2");

		AssertElementNotPresent(
			key_userName = "userfn1",
			locator1 = "Account#USER_TABLE_NAME");
	}

	@priority = "4"
	test RemoveDomain {
		AccountConfiguration.enableAccountEmailDomain();

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "Remove Domain from the Account",
			accountName = "Remove Account Domain",
			domainNames = "liferay.com,Google.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.removeDomain(
			accountName = "Remove Account Domain",
			domainName = "Google.com");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Remove Account Domain");

		AssertElementPresent(
			key_domainName = "liferay.com",
			locator1 = "Account#DOMAIN_TABLE_NAME");

		AssertElementNotPresent(
			key_domainName = "Google.com",
			locator1 = "Account#DOMAIN_TABLE_NAME");
	}

	@priority = "4"
	test RemoveDomainFromBlacklist {
		AccountConfiguration.addBlockedEmailDomain(settingValues = "yahoo.com,blocked.com,google.com");

		for (var settingValue : list "yahoo.com,blocked.com,google.com") {
			SystemSettings.viewTextareaPartialText(
				settingName = "Blocked Email Domains",
				settingValue = "${settingValue}");
		}

		SystemSettings.editTextAreaSetting(
			settingName = "Blocked Email Domains",
			settingValue = "blocked.com");

		SystemSettings.saveConfiguration();

		SystemSettings.viewTextareaValue(
			fieldName = "blockedEmailDomains",
			fieldValue = "blocked.com");
	}

	@priority = "4"
	test RemoveUserFromAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is a test to remove account user.",
			accountName = "Remove Account User");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Remove Account User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Remove Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.unassignAssignee(
			assigneeName = "userfn",
			assigneeType = "Users");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.viewNoAssignee(
			accountName = "Remove Account User",
			assigneeType = "Users");
	}

	@priority = "5"
	test Smoke {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountName = "Accounts Name for Test",
			accountTaxID = "Z9870654786390342199899Y");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Search.searchCP(searchTerm = "Accounts Name for Test");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Accounts Name for Test",
			rowStatus = "Active");

		Accounts.viewAccountDetails(
			accountName = "Accounts Name for Test",
			accountTaxID = "Z9870654786390342199899Y");
	}

	@priority = "4"
	test UnassignOrganizationFromAccount {
		property portal.acceptance = "true";

		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is a test for unassign organization from account.",
			accountName = "Unassign Organization from Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.addAssignee(
			accountName = "Unassign Organization from Account",
			assigneeName = "Organization for Account",
			assigneeType = "Organizations");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Unassign Organization from Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.unassignAssignee(
			assigneeName = "Organization for Account",
			assigneeType = "Organizations");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.viewNoAssignee(
			accountName = "Unassign Organization from Account",
			assigneeType = "Organizations");
	}

	@priority = "4"
	test UpdateAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		AssertElementPresent(locator1 = "Icon#BACK");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Search.searchCP(searchTerm = "Accounts Name for Test");

		Accounts.editCP(
			accountDescriptionEdit = "Update Accounts Name Description for Test",
			accountName = "Accounts Name for Test",
			accountNameEdit = "Update Accounts Name for Test",
			accountStatusEdit = "Inactive");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Update Accounts Name for Test",
			rowStatus = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.gotoEntry(rowEntry = "Update Accounts Name for Test");

		PortletEntry.inputName(name = "Update Accounts Name via Name Link");

		Check.checkToggleSwitch(locator1 = "ToggleSwitch#ACCOUNT_STATUS");

		Button.clickSave();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Edit Update Accounts Name via Name Link");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name via Name Link");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Update Accounts Name via Name Link",
			rowStatus = "Active");

		LexiconEntry.viewNoEntry(rowEntry = "Update Accounts Name for Test");
	}

	@priority = "4"
	test UpdateAccountUser {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.addUsers(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		AccountUsers.editUser(
			accountUser = "userfn userln",
			editFirstName = "edituserfn");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Account Users");

		LexiconEntry.viewEntryName(rowEntry = "edituserfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		LexiconEntry.gotoEntry(rowEntry = "Account with User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "edituserfn");
	}

	@description = "This is a use case for LPS-101221."
	@priority = "4"
	test UpdateInactiveAccountViaNameLink {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Accounts.addCP(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test",
			accountStatus = "Inactive");

		Navigator.gotoBack();

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Accounts Name for Test",
			rowStatus = "Inactive");

		LexiconEntry.gotoEntry(rowEntry = "Accounts Name for Test");

		PortletEntry.inputName(name = "Update Accounts Name via Name Link");

		Button.clickSave();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Edit Update Accounts Name via Name Link");

		Navigator.gotoBack();

		ManagementBar.viewFilterAndOrder(menuItem = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name via Name Link");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Update Accounts Name via Name Link",
			rowStatus = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");
	}

	@description = "This is a use case for LPS-101893."
	@priority = "4"
	test ViewAccountPagination {
		for (var accountNum : list "1,2,3,4,5,6") {
			ApplicationsMenu.gotoPortlet(
				category = "Accounts",
				panel = "Applications",
				portlet = "Accounts");

			Accounts.addCP(accountName = "Accounts Name ${accountNum}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Applications",
			portlet = "Accounts");

		Pagination.changePagination(itemsPerPage = "4");

		for (var accountNum : list "1,2,3,4") {
			LexiconEntry.viewEntryName(rowEntry = "Accounts Name ${accountNum}");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		for (var accountNum : list "5,6") {
			LexiconEntry.viewEntryName(rowEntry = "Accounts Name ${accountNum}");
		}

		Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
	}

}
<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<liferay-portlet:actionURL name="checkCPInstance" portletName="com_liferay_commerce_product_content_web_internal_portlet_CPContentPortlet" var="checkCPInstanceURL">
	<portlet:param name="cpDefinitionId" value="<%= String.valueOf(cpDefinitionId) %>" />
	<portlet:param name="groupId" value="<%= String.valueOf(themeDisplay.getScopeGroupId()) %>" />
</liferay-portlet:actionURL>

<aui:script require="commerce-frontend-js/utilities/eventsDefinitions as eventsDefinitions">

	var cpDefinitionId = <%= cpDefinitionId %>;
	var CP_CONTENT_WEB_PORTLET_KEY = 'com_liferay_commerce_product_content_web_internal_portlet_CPContentPortlet';

	function initialiseOrderDetails() {
		var addToCartButton = Liferay.component('<%= addToCartId %>');

		if (addToCartButton) {
			addToCartButton.disabled = true
		}
	}

	function checkCPInstance(portletURL) {
		var formData = JSON.stringify(getFormData())
		var requestBody = new FormData();

		requestBody.append(
			'_' + CP_CONTENT_WEB_PORTLET_KEY + '_ddmFormValues',
			formData
		)

		return fetch(
			portletURL,
			{
				body: requestBody,
				credentials: 'include',
				headers: new Headers({ 'x-csrf-token': Liferay.authToken }),
				method: 'post'
			}
		)
		.then(function(response){ return response.json() })
		.then(function(jsonResponse) {
			return Object.assign(
				jsonResponse,
				{
					formData: formData
				}
			)
		})
	}

	function getFormValues(form) {
		return !form ? [] : form.getImmediateFields().map(
			function(field) {
				var value = field.getValue();

				return {
					key: field.get('fieldName'),
					value: Array.isArray(value) ? value : [value]
				};
			}
		);
	}

	function getFormData() {
		var form = Liferay.component('ProductOptions' + cpDefinitionId);

		try {
			var formValuesRefs = form.props.pages[0].rows;

			return formValuesRefs.map(function(valueRef) {
				var optionKey = valueRef.columns[0].fields[0].fieldName,
					optionValue = valueRef.columns[0].fields[0].value;

				return {
					key: optionKey,
					value: optionValue
				}
			});
		} catch(ignore) {
			return [];
		}
	}

	function updateAddToCart(productExists, cpInstanceId, formValues) {
		Liferay.fire(
			eventsDefinitions.CURRENT_PRODUCT_STATUS_CHANGED,
			productExists
			? {
				addToCartId: "<%= addToCartId %>",
				productId: cpInstanceId,
				options: formValues,
				quantity: 0,
				settings: {
					maxQuantity: 1000,
					minQuantity: 1,
					multipleQuantities: 1
				}
			}
			: {
				addToCartId: "<%= addToCartId %>",
				productId: null
			}
		)
	}

	function updateGallery(productsData) {
		var formData = new FormData();
		formData.append('<portlet:namespace />ddmFormValues', productsData.formData);
		formData.append('groupId', themeDisplay.getScopeGroupId());

		fetch(
			'<%= String.valueOf(cpContentHelper.getViewAttachmentURL(liferayPortletRequest, liferayPortletResponse)) %>',
			{
				body: formData,
				credentials: 'include',
				headers: new Headers({ 'x-csrf-token': Liferay.authToken }),
				method: 'post'
			}
		).then(
			function(response) {
				return response.json();
			}
		).then(
			function(response) {
				var images = response.map(
					function(image) {
						return {
							thumbnailUrl: image.url,
							url: image.url,
							title: ''
						};
					}
				);
				Liferay.fire(eventsDefinitions.PRODUCT_OPTIONS_CHANGED, {
					images: images
				})
			}
		)
	}

	function updateProductFields(productData) {
		document.querySelector('[data-text-cp-instance-sku]').innerHTML = Liferay.Util.escape(productData.sku) || '';
		document.querySelector('[data-text-cp-instance-manufacturer-part-number]').innerHTML = Liferay.Util.escape(productData.manufacturerPartNumber) || '';
		document.querySelector('[data-text-cp-instance-gtin]').innerHTML = Liferay.Util.escape(productData.gtin) || '';

		var availabilityEstimateContainer = document.querySelector('[data-text-cp-instance-availability-estimate]');
		var availabilityContainer = document.querySelector('[data-text-cp-instance-availability]');
		var stockQuantityContainer = document.querySelector('[data-text-cp-instance-stock-quantity]');

		if (availabilityEstimateContainer && availabilityContainer && stockQuantityContainer) {
			availabilityContainer.innerHTML = productData.availability || '';
			availabilityEstimateContainer.innerHTML = productData.availabilityEstimate || '';
			stockQuantityContainer.innerHTML = productData.stockQuantity || '';
		}

		document.querySelector('[data-text-cp-instance-subscription-info]').innerHTML = productData.subscriptionInfo || '';
		document.querySelector('[data-text-cp-instance-delivery-subscription-info]').innerHTML = productData.deliverySubscriptionInfo || '';

		Liferay.fire(
			"priceUpdated",
			{
				displayDiscountLevels: productData.displayDiscountLevels,
				id: '<%= "productDetail_" + cpCatalogEntry.getCPDefinitionId() %>',
				prices: productData.prices
			}
		);
	}

	function updateView(productsData) {
		updateAddToCart(productsData.cpInstanceExist, productsData.cpInstanceId, productsData.formData);
		updateGallery(productsData);
		updateProductFields(productsData);
	}

	Liferay.componentReady('ProductOptions' + cpDefinitionId)
		.then(function(form) {
			initialiseOrderDetails();

			form.on('fieldEdited',
				function() {
					return checkCPInstance('<%= checkCPInstanceURL %>')
						.then(updateView)
				}
			)
		})

</aui:script>
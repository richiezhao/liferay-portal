def assigneeIdInstanceIds = new HashSet();
def assigneeIds;
def completedInstanceIds = new HashSet();
def slaStatuses;
def slaStatusMap = new HashMap();
def taskNameInstanceIds = new HashSet();
def taskNames;

for (state in states) {
	if (state == null) {
		continue;
	}

	assigneeIdInstanceIds.addAll(state.assigneeIdInstanceIds);

	assigneeIds = state.assigneeIds;

	completedInstanceIds.addAll(state.completedInstanceIds);

	slaStatuses = state.slaStatuses;

	for (entry in state.slaStatusMap.entrySet()) {
		slaStatusMap.merge(
			entry.key, entry.value,
			(slaStatus1, slaStatus2) -> {
				if (slaStatus1.equals(slaStatus2)) {
					return slaStatus1;
				}
				else if (slaStatus1.equals("overdue") ||
						 slaStatus2.equals("overdue")) {

					return "overdue";
				}

				return "onTime";
			});
	}

	taskNameInstanceIds.addAll(state.taskNameInstanceIds);

	taskNames = state.taskNames;
}

def instanceCount = 0;

for (instanceId in completedInstanceIds) {
	if (((assigneeIds == null) ||
		 assigneeIdInstanceIds.contains(instanceId)) && 
		((taskNames == null) || taskNameInstanceIds.contains(instanceId))) {

		if (slaStatuses == null) {
			instanceCount += 1;
		}
		else if (slaStatuses.contains("OnTime") &&
				 slaStatusMap.get(instanceId).equals("onTime")) {

			instanceCount += 1;
		}
		else if (slaStatuses.contains("Overdue") &&
				 slaStatusMap.get(instanceId).equals("overdue")) {

			instanceCount += 1;
		}
		else if (slaStatuses.contains("Untracked") &&
				 slaStatusMap.get(instanceId).equals("untracked")) {

			instanceCount += 1;
		}	
	}
}

return instanceCount;
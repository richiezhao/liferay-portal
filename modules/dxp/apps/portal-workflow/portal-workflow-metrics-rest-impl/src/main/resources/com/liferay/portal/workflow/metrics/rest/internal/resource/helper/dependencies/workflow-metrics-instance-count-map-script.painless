def instanceId = doc.instanceId.value;

if (doc.uid.value.startsWith("WorkflowMetricsTask") &&
	((state.assigneeIds == null) ||
	 (((doc.assigneeIds.size() != 0) &&
	  state.assigneeIds.contains(doc.assigneeIds.value)) || 
	 (state.assigneeIds.contains(-1L) &&
	  state.assigneeType.equals(doc.assigneeType.value))))) {

	state.assigneeIdInstanceIds.add(instanceId);
}

if (doc.uid.value.startsWith("WorkflowMetricsSLAInstanceResult")) {
	state.slaStatusMap.compute(
		instanceId,
		(key, oldSLAStatus) -> {
			if (((oldSLAStatus == null) || oldSLAStatus.equals("untracked")) &&
				(doc.elapsedTime.value == 0)) {

				return "untracked";
			}
			else if (((oldSLAStatus == null) ||
					  !oldSLAStatus.equals("overdue")) &&
					 doc.onTime.value) {

				return "onTime";
			}

			return "overdue";
		});
}

if (doc.uid.value.startsWith("WorkflowMetricsInstance") &&
	((state.completed == null) ||
	 (state.completed == doc.completed.value)) &&
	(((state.endDate == null) && (state.startDate == null)) ||
	 (doc.completed.value &&
	  (doc.completionDate.value.getMillis() <= state.endDate) &&
	  (doc.completionDate.value.getMillis() >= state.startDate)))) {

	state.completedInstanceIds.add(instanceId);

	state.slaStatusMap.compute(
		instanceId,
		(key, slaStatus) -> (slaStatus == null) ? "untracked" : slaStatus);
}

if (doc.uid.value.startsWith("WorkflowMetricsTask") &&
	((state.taskNames == null) ||
	 state.taskNames.contains(doc.name.value))) {

	state.taskNameInstanceIds.add(instanceId);
}
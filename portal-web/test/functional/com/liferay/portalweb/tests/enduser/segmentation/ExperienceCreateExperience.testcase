@component-name = "portal-segmentation"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		Navigator.openURL();

		// Create site and content page

		JSONGroup.addGroup(groupName = "Test Site Name");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Experience Content Page");

		// Create segmentation

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Segments");

		LexiconEntry.gotoAdd();

		Segmentation.addProperties(propertyOption = "Email Address");

		Segmentation.fillTitle(titleField = "AddSegmentUserEmailAddressContains Test");

		Segmentation.changeCriterionInputEmailAddress(criterionInputOption = "Contains");

		Segmentation.fillProperty(PropertyField = "liferay");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();
		}
	}

	@description = "Validate if the user can create a Experience"
	@priority = "5"
	test AddDefaultExperienceWithBannerCenter {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		Button.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		AssertTextEquals(
			locator1 = "Experience#BANNER_CENTER_TITLE_EXAMPLE_PORTLET",
			value1 = "Banner Title Example");
	}

	@description = "Display correct experience for the logged user"
	@priority = "5"
	test DisplayUserExperience {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(experienceName = "exp1");

		Refresh();

		PageEditor.changeExperience(newExperience = "exp1");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Heading Example");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Edited Inline Text");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Edited Inline Text");

		PageEditor.changeExperience(newExperience = "Default");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Heading Example");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Experience Content Page",
			siteName = "Test Site Name");

		AssertTextEquals(
			locator1 = "Experience#PUBLISHED_HEADING",
			value1 = "Edited Inline Text");

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Experience Content Page",
			siteName = "Test Site Name");

		AssertTextEquals(
			locator1 = "Experience#PUBLISHED_HEADING",
			value1 = "Heading Example");

		User.firstLoginPG();
	}

	@description = "Validate experience edition and deletion"
	@priority = "5"
	test EditAndDeleteExperience {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addExperience(experienceName = "exp1");

		Refresh();

		PageEditor.editExperience(newExperience = "exp1_edited");

		PageEditor.deleteExperience(experienceName = "exp1_edited");

		PageEditor.clickPublish();
	}

	@description = "Validate inline text changes between experiences"
	@priority = "5"
	test EditInlineTextExperience {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(experienceName = "exp1");

		Refresh();

		PageEditor.changeExperience(newExperience = "exp1");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Heading Example");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Edited Inline Text");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Edited Inline Text");

		PageEditor.changeExperience(newExperience = "Default");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Heading Example");

		Button.clickPublish();
	}

}